
<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-11-05T22:15:14-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Mandelli.ant</title><subtitle>Personal blog and published pieces covering blockchain, cryptocurrencies, product development, data analytics, and digital marketing.</subtitle><author><name>Anthony Mandelli</name></author><entry><title type="html">Coin Metrics Ethereum Merge Day Live Stream</title><link href="http://localhost:4000/recordings/2022/10/31/coin-metrics-merge-streams.html" rel="alternate" type="text/html" title="Coin Metrics Ethereum Merge Day Live Stream" /><published>2022-10-31T00:00:00-04:00</published><updated>2022-10-31T00:00:00-04:00</updated><id>http://localhost:4000/recordings/2022/10/31/coin-metrics-merge-streams</id><content type="html" xml:base="http://localhost:4000/recordings/2022/10/31/coin-metrics-merge-streams.html">&lt;h3 id=&quot;ethereum-merge-day-live-stream&quot;&gt;Ethereum Merge Day Live Stream&lt;/h3&gt;


&lt;h2 id=&quot;watch-on-twitter&quot;&gt;Watch on Twitter&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;part-one&quot;&gt;&lt;strong&gt;Part One&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;part-two&quot;&gt;&lt;strong&gt;Part Two&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Anthony Mandelli</name></author><category term="recordings" /><category term="Ethereum" /><category term="The Merge" /><category term="Coin Metrics" /><category term="Cryptocurrency" /><category term="blockchain" /><category term="proof of stake" /><summary type="html">Ethereum Merge Day Live Stream</summary></entry><entry><title type="html">Configuring Handshake Top-level Domains for GitHub Pages</title><link href="http://localhost:4000/how-to/2020/08/18/configuring-handshake-top-level-domains-for-github-pages.html" rel="alternate" type="text/html" title="Configuring Handshake Top-level Domains for GitHub Pages" /><published>2020-08-18T00:00:00-04:00</published><updated>2020-08-18T00:00:00-04:00</updated><id>http://localhost:4000/how-to/2020/08/18/configuring-handshake-top-level-domains-for-github-pages</id><content type="html" xml:base="http://localhost:4000/how-to/2020/08/18/configuring-handshake-top-level-domains-for-github-pages.html">&lt;h3 id=&quot;a-quick-start-guide-for-dweb-hosting&quot;&gt;A Quick Start Guide for DWeb Hosting&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Originally posted on &lt;a href=&quot;blockchannel&quot;&gt;BlockChannel&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020/configuring-handshake-domains-for-github/HNS-GH.png&quot; alt=&quot;Handshake and GitHub&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-handshake&quot;&gt;What is &lt;a href=&quot;handshake&quot;&gt;Handshake&lt;/a&gt;?&lt;/h2&gt;
&lt;p&gt;Handshake is a decentralized DNS and certificate authority — think &lt;a href=&quot;icann&quot;&gt;Internet Corporation for Assigned Names and Numbers&lt;/a&gt; but with smart contracts instead of people.&lt;/p&gt;

&lt;p&gt;If you’re not familiar with ICANN, it’s a United States nonprofit organization that maintains databases of namespaces and numerical designations on the web; a phone book for the entire internet.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Handshake aims to experiment with new ways the internet can be more secure, resilient, and socially useful with a peer-to-peer system validated by the network’s participants. — &lt;a href=&quot;handshake&quot;&gt;Handshake.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Handshake’s purpose is to remove the need for authorities like ICANN and the registrars that charge rental fees for domain name “ownership.” Instead, Handshake’s permissionless blockchain serves as the source of truth, providing immutable DNS records. This is the coolest part: this means when you buy a domain with Handshake, you actually &lt;em&gt;own&lt;/em&gt; it.&lt;/p&gt;

&lt;p&gt;Once you own a top level domain, naturally you want to do something with it. Here’s how to initially set up a personal website using GitHub Pages and then point your Handshake domain to it.&lt;/p&gt;

&lt;p&gt;If you don’t own a Handshake domain yet, the &lt;a href=&quot;nb-docs&quot;&gt;Namebase docs&lt;/a&gt; walk you through the process.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-a-github-pages-site&quot;&gt;Setting up a GitHub Pages site&lt;/h2&gt;

&lt;p&gt;GitHub Pages lets users turn repositories into websites. There are two kinds of Pages sites: personal and project. Project sites let you turn a specific folder or branch of your repository into a website whereas personal sites require the entire repo and publish from the main branch. This guide is based on a personal GitHub Pages site.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;pages-docs&quot;&gt;GitHub’s official docs&lt;/a&gt; are very helpful; I wrote a &lt;a href=&quot;pages-guide&quot;&gt;step-by-step guide for building a Pages&lt;/a&gt; site as well.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Broadly speaking:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Create a new repository on GitHub called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;USERNAME.github.io&lt;/code&gt; where USERNAME is your GitHub username.&lt;/li&gt;
  &lt;li&gt;Go to the repository settings …&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020/configuring-handshake-domains-for-github/settings-tab.png&quot; alt=&quot;repo-settings&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;… then scroll down to enable GitHub Pages by choosing a publishing source (for personal websites, select the &lt;em&gt;Master&lt;/em&gt; branch) and choosing a theme.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;\assets\img\blog\2020\configuring-handshake-domains-for-github\pages-setting.png&quot; alt=&quot;enable-pages&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.md&lt;/code&gt; file to your repository’s root directory and commit it to your publishing source (which should be the main branch).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;updating-your-github-pages-url-settings&quot;&gt;Updating your GitHub Pages URL settings&lt;/h2&gt;

&lt;p&gt;Once your repository has GitHub Pages enabled, in the Settings tab you’ll now have the option to set a custom domain for your site. As far as GitHub is concerned, it really is as easy as just typing in your Handshake domain and hitting ‘Save.’&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\img\blog\2020\configuring-handshake-domains-for-github\github-pages-custom-domain-HNS.png&quot; alt=&quot;custom-domain&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I chose to set my URL as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;writtenby.mandelliant&lt;/code&gt; but it could have just as easily been &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mandelliant&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;configuring-your-handshake-top-level-domain&quot;&gt;Configuring your Handshake top level domain&lt;/h2&gt;

&lt;p&gt;Using Namebase, from your dashboard you can manage any domains you own.&lt;/p&gt;

&lt;p&gt;Select the domain you want to use and click the ‘Manage’ button.&lt;/p&gt;

&lt;p&gt;If you have the ability to host your own nameservers, Namebase recommends doing so, otherwise they give you the information you need to use theirs.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create your NS record:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\img\blog\2020\configuring-handshake-domains-for-github\NS-record.png&quot; alt=&quot;ns record&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add your nameserver DNS records:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;\assets\img\blog\2020\configuring-handshake-domains-for-github\HNS-DNS.png&quot; alt=&quot;dns records&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The Name field is the subdomain for your website, and the Value/Data field is where the URL should point. I left the default TTL value.&lt;/p&gt;

&lt;p&gt;Your GitHub Pages site should now be accessible from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subdomain.yourdomain/&lt;/code&gt;!&lt;/p&gt;

&lt;h2 id=&quot;visiting-handshake-domains&quot;&gt;Visiting Handshake domains&lt;/h2&gt;

&lt;p&gt;There are two ways to see your new domain in action: changing the DNS settings on your browser/device, or using the Handshake search engine &lt;a href=&quot;hns-to&quot;&gt;HNS.to&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Give HNS.to a try by searching for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;welcome.nb&lt;/code&gt; or (shameless plug) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;writtenby.mandelliant&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets\img\blog\2020\configuring-handshake-domains-for-github\HNS.to.gif&quot; alt=&quot;hns to&quot; /&gt;
&lt;em&gt;gif courtesy of the &lt;a href=&quot;gif-link&quot;&gt;Namebase docs&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you want to try &lt;a href=&quot;dns-settings&quot;&gt;modifying your DNS settings&lt;/a&gt;, Namebase covers a variety of methods on different platforms / operating systems.&lt;/p&gt;

&lt;p&gt;Happy building! Thank BlockChannel for posting this piece originally by learning more about &lt;a href=&quot;dweb&quot;&gt;what’s to come for the DWeb&lt;/a&gt;.&lt;/p&gt;</content><author><name>Anthony Mandelli</name></author><category term="how-to" /><category term="websites" /><category term="Handshake" /><category term="github pages" /><category term="personal website" /><category term="domains" /><category term="DNS" /><category term="top level domain" /><category term="HNS" /><category term="DWeb" /><category term="hosting" /><summary type="html">A Quick Start Guide for DWeb Hosting</summary></entry><entry><title type="html">Building a personal website using Jekyll and GitHub Pages</title><link href="http://localhost:4000/how-to/2020/07/27/building-websites-with-jekyll-and-github-pages.html" rel="alternate" type="text/html" title="Building a personal website using Jekyll and GitHub Pages" /><published>2020-07-27T00:00:00-04:00</published><updated>2020-07-27T00:00:00-04:00</updated><id>http://localhost:4000/how-to/2020/07/27/building-websites-with-jekyll-and-github-pages</id><content type="html" xml:base="http://localhost:4000/how-to/2020/07/27/building-websites-with-jekyll-and-github-pages.html">&lt;p&gt;GitHub has a feature called &lt;a href=&quot;pages&quot;&gt;Pages&lt;/a&gt; which essentially lets you turn a repository full of &lt;a href=&quot;markdown&quot;&gt;markdown&lt;/a&gt; files into a website (like &lt;a href=&quot;repo&quot;&gt;the one you’re on now&lt;/a&gt;). Seeing as I have very little web dev experience but feel relatively comfortable writing markdown, Pages seemed like a great way to get the feel of a custom personal website with GitHub handling most of the nitty-gritty backend details. It’s also free, which fit my budget.&lt;/p&gt;

&lt;p&gt;A personal website can be like a digital business card. I use mine as a blog and portfolio of both writing samples and the work I’ve done on the site. It’s a powerful professional tool and an outlet for creativity.&lt;/p&gt;

&lt;p&gt;If you have some coding experience and don’t mind using command line tools, GitHub Pages and Jekyll might be worth considering if you want to build your own website.&lt;/p&gt;

&lt;p&gt;Here’s what worked for me:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#prereqs&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started&quot;&gt;Follow GitHub’s getting started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#modify&quot;&gt;Modify the design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#domain&quot;&gt;Set up a custom domain&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;prereqs&quot;&gt;1. Prerequisites&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;Git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ruby-lang.org/en/documentation/installation/&quot;&gt;Ruby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bundler.io&quot;&gt;Bundler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/installation/&quot;&gt;Jekyll&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After installing Git and Ruby, download &lt;a href=&quot;https://bundler.io&quot;&gt;Bundler&lt;/a&gt;. Bundler is a utility that manages some backend tasks (like keeping the Ruby gemfiles up to date and making sure Jekyll builds execute properly) to reduce build errors or environment issues.&lt;/p&gt;

&lt;p&gt;GitHub recommends using Bundler to install Jekyll. From the root folder of your site project, run the following command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle install jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;2. Follow GitHub&apos;s getting started&lt;/h2&gt;

&lt;p&gt;Follow [the setup guide][guide] on the Pages website:&lt;/p&gt;

&lt;h4 id=&quot;create-your-repository&quot;&gt;Create your repository.&lt;/h4&gt;

&lt;p&gt;For individual and organization pages, the repository must be named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username.github.io&lt;/code&gt; where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt; is your GitHub username. These websites will publish from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch of the repository. Project pages can publish from a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch or a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docs&lt;/code&gt; folder, but I’m only covering individual/organization pages in this guide.&lt;/p&gt;

&lt;p&gt;When initially setting up the repository for Pages on GitHub, the instructions walk you through configuration but don’t explicitly say whether or not to create the repo. When you get to that point, initialize with a README (unless you’re importing a repository) and click ‘Create’.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020/building-personal-website-jekyll/create-repo.png&quot; alt=&quot;create-repo&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;create-your-jekyll-site&quot;&gt;Create your Jekyll site&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Using your Git tool of choice, navigate to the root folder containing your soon to be website. Initialize it as a Git repository with the following command, replacing REPOSITORY-NAME with your repository name:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ git init REPOSITORY-NAME
 &amp;gt; Initialized empty Git repository in /Users/anthony/mandelliant.github.io/.git/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Because this is a personal/organizational Pages site, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch is your live website. Check you’re on the right branch with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch&lt;/code&gt;.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ git branch
 &amp;gt; * master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Once you’re in the right folder and on the right branch, use the following Jekyll command to create the website: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ bundle exec jekyll VERSION new .&lt;/code&gt;. Replace VERSION with the &lt;a href=&quot;https://pages.github.com/versions/&quot;&gt;current dependency version GitHub Pages requires&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open the Gemfile and follow the instructions in the code comments to configure it for GitHub Pages. The GitHub guide then says to update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem&lt;/code&gt; line to: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;github-pages&quot;, &quot;~&amp;gt; VERSION&quot;, group: :jekyll_plugins&lt;/code&gt;, again replacing VERSION with the &lt;a href=&quot;https://pages.github.com/versions/&quot;&gt;current dependency version&lt;/a&gt;. I couldn’t get that to work, so I left off the VERSION entirely and that seemed to do the trick. I’m not necessarily endorsing that as the correct course of action, but I haven’t run into any issues.&lt;/p&gt;

    &lt;p&gt;This is what the relevant lines of my Gemfile look like after updating:&lt;/p&gt;

    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c1&quot;&gt;# If you want to use GitHub Pages, remove the &quot;gem &quot;jekyll&quot;&quot; above and&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;# uncomment the line below. To upgrade, run `bundle update github-pages`.&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;github-pages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;group: :jekyll_plugins&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;# If you have any plugins, put them here!&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:jekyll_plugins&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-feed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 0.12&quot;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Save and close the Gemfile.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At this point, GitHub suggests &lt;a href=&quot;https://docs.github.com/en/github/working-with-github-pages/testing-your-github-pages-site-locally-with-jekyll&quot;&gt;testing your site locally&lt;/a&gt;. Use the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ bundle exec jekyll serve&lt;/code&gt; to run a test server from your computer:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ bundle exec jekyll serve
 &amp;gt;  Configuration file: /Users/octocat/my-site/_config.yml
 &amp;gt;            Source: /Users/octocat/my-site
 &amp;gt;       Destination: /Users/octocat/my-site/_site
 &amp;gt; Incremental build: disabled. Enable with --incremental
 &amp;gt;      Generating...
 &amp;gt;                    done in 0.309 seconds.
 &amp;gt; Auto-regeneration: enabled for &apos;/Users/octocat/my-site&apos;
 &amp;gt; Configuration file: /Users/octocat/my-site/_config.yml
 &amp;gt;    Server address: http://127.0.0.1:4000/
 &amp;gt;  Server running... press ctrl-c to stop.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;In a new browser tab, navigate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:4000&lt;/code&gt; to see your website for the first time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Connect your local directory with your repository on GitHub.&lt;/p&gt;

    &lt;p&gt;First, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ git remote add origin https://github.com/USER/REPOSITORY.git&lt;/code&gt;, replacing USER with the user account that owns the repository, and REPOSITORY with the name of your GitHub Pages repo.&lt;/p&gt;

    &lt;p&gt;Then push the repository to GitHub with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ git push -u origin BRANCH&lt;/code&gt;, replacing BRANCH with the name of the branch you’re working on, which should be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And that’s it! Your website should now be live at YOURNAME.github.io. You can check by navigating to your repo and opening the settings - if you scroll down, there will be a GitHub Pages section with a link to your site.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020/building-personal-website-jekyll/click-pages-url-to-preview.png&quot; alt=&quot;pages-url&quot; /&gt;
&lt;em&gt;&lt;a href=&quot;https://docs.github.com/en/github/working-with-github-pages/creating-a-github-pages-site-with-jekyll#creating-a-repository-for-your-site&quot;&gt;image source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From there, the GitHub guide offers instructions on &lt;a href=&quot;https://docs.github.com/en/github/working-with-github-pages/adding-content-to-your-github-pages-site-using-jekyll&quot;&gt;adding new posts and pages&lt;/a&gt; or &lt;a href=&quot;https://docs.github.com/en/github/working-with-github-pages/adding-a-theme-to-your-github-pages-site-using-jekyll&quot;&gt;customizing your theme&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;modify&quot;&gt;3. Modify the design&lt;/h2&gt;

&lt;p&gt;If you’re like me and unfamiliar with Ruby, different elements called gems control a lot of the configurations and settings; Jekyll layout themes, like the default theme Minima, are gems.&lt;/p&gt;

&lt;p&gt;This means much of the HTML laying out your pages is hidden away in the directory where you initially installed Ruby. Unless you selected a different location, the path should be something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:/Ruby26x-64 &amp;gt; lib &amp;gt; ruby &amp;gt; gems &amp;gt; 2.6.0 &amp;gt; gems &amp;gt; minima-2.5.1&lt;/code&gt; for Windows (which should translate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Users/username/.rubies/ruby-2.6.2/bin/ruby&lt;/code&gt; on Mac). From there you can access the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt; folders and files.&lt;/p&gt;

&lt;p&gt;You can modify these files to change the layout of your pages from your theme’s default or add elements like the callout box above the main content on my homepage that shows my most recent blog post. But if you only change the local version of the file on your computer, the changes won’t override the default settings GitHub uses to render your site, so the live version of your website will look different than when you &lt;a href=&quot;https://docs.github.com/en/github/working-with-github-pages/testing-your-github-pages-site-locally-with-jekyll&quot;&gt;test it locally&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To override any of these files, all you have to do is create a new version in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt; folder in your website’s root directory (similar to the instructions in the guide on &lt;a href=&quot;https://docs.github.com/en/github/working-with-github-pages/adding-a-theme-to-your-github-pages-site-using-jekyll&quot;&gt;customizing your theme&lt;/a&gt;- you can also look at my website’s &lt;a href=&quot;https://github.com/Mandelliant/mandelliant.github.io&quot;&gt;repository&lt;/a&gt; as an example).&lt;/p&gt;

&lt;h4 id=&quot;modifying-the-homepage&quot;&gt;Modifying the homepage&lt;/h4&gt;

&lt;p&gt;The homepage layout is controlled by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.markdown&lt;/code&gt; file Jekyll placed in your root directory. If you open that file, you’ll notice the layout is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;home&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020/building-personal-website-jekyll/homepage-markdown.png&quot; alt=&quot;homepage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts&lt;/code&gt; folder to your root directory, then create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;home.html&lt;/code&gt; file inside.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020/building-personal-website-jekyll/layouts.png&quot; alt=&quot;layouts&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Copy the contents of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;home.html&lt;/code&gt; file in your local Ruby folder into the new file in your website (or start completely from scratch if you prefer). Now in the file in your website, you can make any changes you want. Add the floating box:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020/building-personal-website-jekyll/floating-box.png&quot; alt=&quot;floating-box&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The endif tags in this code snippet were causing a Jekyll Liquid syntax error preventing the post from building locally, so you get a screenshot instead. You can find the code &lt;a href=&quot;https://github.com/Mandelliant/mandelliant.github.io/blob/master/assets/main.scss&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Orienting the box on the page and styling the shadow requires some CSS. Create an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Assets&lt;/code&gt; folder in the root directory and add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.scss&lt;/code&gt; file inside to supersede the default CSS that comes with the Minima theme.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;minima&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.floating-content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#778899&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ffffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;domain&quot;&gt;4. Set up a custom domain&lt;/h2&gt;

&lt;p&gt;GitHub makes it really easy to add your own domain for your Pages site. From your repository on GitHub, go to the settings and scroll down to the GitHub Pages section. There will be a field to input a custom domain:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2020/building-personal-website-jekyll/custom-domain.png&quot; alt=&quot;domain&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is my actual domain - thanks to a sweet project called &lt;a href=&quot;https://handshake.org/&quot;&gt;Handshake&lt;/a&gt;, I own the top level domain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mandelliant/&lt;/code&gt;. If you’re &lt;a href=&quot;https://learn.namebase.io/starting-from-zero/how-to-access-handshake-sites&quot;&gt;resolving HNS domains&lt;/a&gt;, check out &lt;a href=&quot;http://writtenby.mandelliant/&quot;&gt;writtenby.mandelliant/&lt;/a&gt;. I plan to write more about Handshake and setting up the domain soon.&lt;/p&gt;

&lt;p&gt;There are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;baseurl&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url&lt;/code&gt; fields in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file in your site’s root directory, and I’m sure there’s a very good reason for them, but it seems like I’m not having any issues leaving them empty for now. If you have a custom domain you want to use, GitHub has &lt;a href=&quot;https://docs.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site&quot;&gt;instructions&lt;/a&gt; for setting it up and updating your DNS records.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p class=&quot;rss-subscribe&quot;&gt;Subscribe &lt;a href=&quot;/feed.xml&quot;&gt;via RSS&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;</content><author><name>Anthony Mandelli</name></author><category term="how-to" /><category term="websites" /><category term="jekyll" /><category term="github pages" /><category term="personal website" /><category term="ruby" /><summary type="html">GitHub has a feature called Pages which essentially lets you turn a repository full of markdown files into a website (like the one you’re on now). Seeing as I have very little web dev experience but feel relatively comfortable writing markdown, Pages seemed like a great way to get the feel of a custom personal website with GitHub handling most of the nitty-gritty backend details. It’s also free, which fit my budget.</summary></entry><entry><title type="html">Hello world</title><link href="http://localhost:4000/updates/2020/07/06/hello-world.html" rel="alternate" type="text/html" title="Hello world" /><published>2020-07-06T00:00:00-04:00</published><updated>2020-07-06T00:00:00-04:00</updated><id>http://localhost:4000/updates/2020/07/06/hello-world</id><content type="html" xml:base="http://localhost:4000/updates/2020/07/06/hello-world.html">&lt;h3 id=&quot;and-so-it-begins&quot;&gt;And so it begins&lt;/h3&gt;

&lt;p&gt;This website started off as a way to host some of my favorite written pieces that I’ve worked on over the years.&lt;/p&gt;

&lt;p&gt;But I had so much fun building it (read: frustration re-acquainting myself with Jekyll), that it seemed a shame to just plop down some text and let it be.&lt;/p&gt;

&lt;p&gt;So now it’s a portfolio website that will grow and be a sandbox to play around in.&lt;/p&gt;

&lt;p&gt;And it’s going to host a blog (because everyone needs a blog or at least a podcast or newsletter).&lt;/p&gt;</content><author><name>Anthony Mandelli</name></author><category term="Updates" /><summary type="html">And so it begins</summary></entry></feed>